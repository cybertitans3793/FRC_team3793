// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3793.CTRobot.commands;

import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.command.PIDCommand;

import org.usfirst.frc3793.CTRobot.Robot;
import org.usfirst.frc3793.CTRobot.RobotDefines;
import org.usfirst.frc3793.CTRobot.RobotMap;

/**
 *
 */
public class  DriveStraight extends PIDCommand {
	private double m_speed;
    public DriveStraight(double speed) {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("DriveStraight", 0.0, 0.05, 0.0, 0.02);
        getPIDController().setContinuous(false);
        getPIDController().setAbsoluteTolerance(0.01);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        getPIDController().setSetpoint(0.0);
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
//        requires(Robot.pIDDriveTrain);
        setSpeed(speed);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    
    protected void setSpeed(double speed) {
    	m_speed = speed;
    }

    protected double returnPIDInput() {
    	double leftEncOmega;
    	double rightEncOmega;
    	double diffEncOmega;
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
 //       return RobotMap.pIDDriveTrainQuadratureEncoderRight.pidGet();
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        leftEncOmega = RobotMap.pIDDriveTrainQuadratureEncoderLeft.getRate();
    	rightEncOmega = RobotMap.pIDDriveTrainQuadratureEncoderRight.getRate();
    	diffEncOmega = leftEncOmega - rightEncOmega;
    	System.out.println("Lw " + leftEncOmega + " Rw " + rightEncOmega + " Diffw " 
    							+ diffEncOmega);
        return diffEncOmega;       
    }

    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
//        RobotMap.pIDDriveTrainMotorR.pidWrite(output);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        RobotMap.pIDDriveTrainRobotDrive01.tankDrive((output + m_speed), -m_speed, false);
    }
    

    // Called just before this Command runs the first time
    protected void initialize() {
    	RobotMap.pIDDriveTrainQuadratureEncoderLeft.setPIDSourceParameter(PIDSourceParameter.kRate);
    	RobotMap.pIDDriveTrainQuadratureEncoderRight.setPIDSourceParameter(PIDSourceParameter.kRate);
    	if (RobotDefines.simulation == true) {
    		RobotMap.pIDDriveTrainWheelLR.set(m_speed);
    		RobotMap.pIDDriveTrainWheelRR.set(-m_speed);
    	}
    	getPIDController().enable();
    	System.out.println("At DriveStraight.");
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
