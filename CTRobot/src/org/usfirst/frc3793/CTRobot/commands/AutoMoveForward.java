// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3793.CTRobot.commands;

import edu.wpi.first.wpilibj.command.*;

import edu.wpi.first.wpilibj.command.PIDCommand;
import org.usfirst.frc3793.CTRobot.Robot;
import org.usfirst.frc3793.CTRobot.RobotDefines;
import org.usfirst.frc3793.CTRobot.RobotMap;

/**
 *
 */
public class  AutoMoveForward extends PIDCommand {

    public AutoMoveForward(double dist) {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("AutoMoveForward", 4.0, 0.0, 0.0, 0.02);
        getPIDController().setContinuous(false);
        getPIDController().setAbsoluteTolerance(5.0);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        getPIDController().setSetpoint(dist);
    }

    protected double returnPIDInput() {
    	double rightEnc;
    	double leftEnc;
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
  //      return RobotMap.driveTrainQuadratureEncoderLeft.pidGet();
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    	rightEnc = RobotMap.driveTrainQuadratureEncoderRight.pidGet();
    	leftEnc = RobotMap.driveTrainQuadratureEncoderLeft.pidGet();
    	System.out.println("Left Enc is " + leftEnc + " Right Enc is " + rightEnc);
    	return (leftEnc + rightEnc)/2.0; 
    }

    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
//        RobotMap.driveTrainWheelL.pidWrite(output);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        RobotMap.driveTrainMotorR.set(-output);
        RobotMap.driveTrainMotorL.set(output);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	getPIDController().reset();
    	usePIDOutput(0.2);
    	System.out.println("Autonomous Encoder Angular Displacement");
        if(RobotDefines.simulation==true) {
        	RobotMap.driveTrainWheelLR.set(0.2);
        	RobotMap.driveTrainWheelRR.set(-0.2);
        }    	
    	getPIDController().enable();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return getPIDController().onTarget();
    }

    // Called once after isFinished returns true
    protected void end() {
    	usePIDOutput(0.0);
    	System.out.println("Done Autonomous");
        if(RobotDefines.simulation==true) {
        	RobotMap.driveTrainWheelLR.set(0.0);
        	RobotMap.driveTrainWheelRR.set(0.0);
        }
    	getPIDController().disable();
    	
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
