// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3793.CTRobot.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc3793.CTRobot.Robot;
import org.usfirst.frc3793.CTRobot.RobotDefines;
import org.usfirst.frc3793.CTRobot.RobotMap;
import org.usfirst.frc3793.CTRobot.OI;
import org.usfirst.frc3793.CTRobot.commands.DriveStraight;


/**
 *
 */
public class  MoveRobot extends Command {
	private DriveStraight drivestraight;
	private double dif;
	private double turn;
    public MoveRobot() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	requires(Robot.driveTrain);
    	drivestraight = new DriveStraight(0.0);
    	System.out.println("At MoveRobot Constructor");
    	
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	System.out.println("At MoveRobot");
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	double rightW;
    	double leftW;
 //   	Robot.driverain.drive(Robot.oi.joystickMove.getX(), Robot.oi.joystickMove.getY());
    	if (RobotDefines.simulation == false) {	
    		dif = Robot.oi.driveJoystick.getRawAxis(3)-Robot.oi.driveJoystick.getRawAxis(2);
    		turn = Robot.oi.driveJoystick.getRawAxis(0);
    
    		dif = Robot.oi.scale(dif, 0.2);
    		turn = Robot.oi.scale(turn, 0.2);
    	} else {
    		dif = -0.4;
    		turn = 0.0;
    	}
    	Robot.driveTrain.drive(RobotDefines.cDriveCoefficient*dif, RobotDefines.cTurnCoefficient*turn);
//    	System.out.println("turn is " + turn);
    	if (turn == 0.0) {
    		drivestraight.setpoint(RobotDefines.cDriveCoefficient*dif);
     	}
    }
    	
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	 Robot.driveTrain.drive(0.0, 0.0);   
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	 end();
    }
}
