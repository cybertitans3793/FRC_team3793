// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3793.CTRobot;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
   
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Compressor grabberCompressor1;
    public static Solenoid toteGrabber;
    public static AnalogInput autoSwitchAnalogInput1;
    public static SpeedController theLifter;
    public static Ultrasonic pIDPulleyPulleySonar;
    public static DigitalInput pIDPulleyLimitSwitch1;
    public static Encoder driveTrainQuadratureEncoderRight;
    public static Encoder driveTrainQuadratureEncoderLeft;
    public static Ultrasonic driveTrainSonarL;
    public static Ultrasonic driveTrainSonarR;
    public static SpeedController driveTrainMotorL;
    public static SpeedController driveTrainMotorR;
    public static RobotDrive driveTrainRobotDrive01;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //For GearsBot Simulation                                              
    public static SpeedController driveTrainWheelLR;
    public static SpeedController driveTrainWheelRR;
    public static Gyro gyro;


    public static void init() {
    	if(RobotDefines.simulation==false) {
           // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        grabberCompressor1 = new Compressor(0);
        
        
        toteGrabber = new Solenoid(1);
        LiveWindow.addActuator("Grabber", "Solenoid 1", toteGrabber);
        
        autoSwitchAnalogInput1 = new AnalogInput(0);
        LiveWindow.addSensor("AutoSwitch", "Analog Input 1", autoSwitchAnalogInput1);
        
        theLifter = new Talon(2);
        LiveWindow.addActuator("PIDPulley", "PulleyMotor", (Talon) theLifter);
        /*
        pIDPulleyPulleySonar = new Ultrasonic(8, 9);
        LiveWindow.addSensor("PIDPulley", "PulleySonar", pIDPulleyPulleySonar);
        
        pIDPulleyLimitSwitch1 = new DigitalInput(10);
        LiveWindow.addSensor("PIDPulley", "Limit Switch 1", pIDPulleyLimitSwitch1);
        */
        driveTrainQuadratureEncoderRight = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Quadrature EncoderRight", driveTrainQuadratureEncoderRight);
        driveTrainQuadratureEncoderRight.setDistancePerPulse(1.0);
        driveTrainQuadratureEncoderRight.setPIDSourceParameter(PIDSourceParameter.kDistance);
        driveTrainQuadratureEncoderLeft = new Encoder(4, 5, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Quadrature EncoderLeft", driveTrainQuadratureEncoderLeft);
        driveTrainQuadratureEncoderLeft.setDistancePerPulse(1.0);
        driveTrainQuadratureEncoderLeft.setPIDSourceParameter(PIDSourceParameter.kDistance);
        //driveTrainSonarL = new Ultrasonic(0, 1);
        //LiveWindow.addSensor("DriveTrain", "SonarL", driveTrainSonarL);
        
        //driveTrainSonarR = new Ultrasonic(6, 7);
        //LiveWindow.addSensor("DriveTrain", "SonarR", driveTrainSonarR);
        
        driveTrainMotorL = new Talon(0);
        LiveWindow.addActuator("DriveTrain", "MotorL", (Talon) driveTrainMotorL);
        
        driveTrainMotorR = new Talon(1);
        LiveWindow.addActuator("DriveTrain", "MotorR", (Talon) driveTrainMotorR);
        
        driveTrainRobotDrive01 = new RobotDrive(driveTrainMotorL, driveTrainMotorR);
        
        driveTrainRobotDrive01.setSafetyEnabled(true);
        driveTrainRobotDrive01.setExpiration(0.1);
        driveTrainRobotDrive01.setSensitivity(0.5);
        driveTrainRobotDrive01.setMaxOutput(1.0);
        


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    //Simulation enabled part
       } else {
           driveTrainQuadratureEncoderRight = new Encoder(3, 4, false, EncodingType.k4X);
           LiveWindow.addSensor("PIDDriveTrain", "Quadrature EncoderRight", driveTrainQuadratureEncoderRight);
           driveTrainQuadratureEncoderRight.setDistancePerPulse(RobotDefines.cEncPulseDistSim);
           driveTrainQuadratureEncoderRight.setPIDSourceParameter(PIDSourceParameter.kDistance);
           driveTrainQuadratureEncoderLeft = new Encoder(1, 2, false, EncodingType.k4X);
           LiveWindow.addSensor("PIDDriveTrain", "Quadrature EncoderLeft", driveTrainQuadratureEncoderLeft);
           driveTrainQuadratureEncoderLeft.setDistancePerPulse(RobotDefines.cEncPulseDistSim);
           driveTrainQuadratureEncoderLeft.setPIDSourceParameter(PIDSourceParameter.kDistance);
           
           driveTrainMotorL = new Talon(1);
           LiveWindow.addActuator("PIDDriveTrain", "MotorL", (Talon) driveTrainMotorL);
           
           driveTrainMotorR = new Talon(3);
           LiveWindow.addActuator("PIDDriveTrain", "MotorR", (Talon) driveTrainMotorR);
           
           driveTrainRobotDrive01 = new RobotDrive(driveTrainMotorL, driveTrainMotorR);

           driveTrainWheelLR = new Talon(2);
           LiveWindow.addActuator("PIDDriveTrain", "WheelLR", (Talon) driveTrainWheelLR);
           
           driveTrainWheelRR = new Talon(4);
           LiveWindow.addActuator("PIDDriveTrain", "WheelRR", (Talon) driveTrainWheelRR);
           
           driveTrainRobotDrive01.setSafetyEnabled(true);
           driveTrainRobotDrive01.setExpiration(0.1);
           driveTrainRobotDrive01.setSensitivity(0.5);
           driveTrainRobotDrive01.setMaxOutput(1.0);

           gyro = new Gyro(1);           
       	       
       }       
    }
}
