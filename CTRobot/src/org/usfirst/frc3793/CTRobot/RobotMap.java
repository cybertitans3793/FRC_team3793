// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3793.CTRobot;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
   
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Encoder pIDDriveTrainQuadratureEncoderRight;
    public static Encoder pIDDriveTrainQuadratureEncoderLeft;
    public static Ultrasonic pIDDriveTrainSonarL;
    public static Ultrasonic pIDDriveTrainSonarR;
    public static SpeedController pIDDriveTrainMotorL;
    public static SpeedController pIDDriveTrainMotorR;
    public static RobotDrive pIDDriveTrainRobotDrive01;
    public static Compressor grabberCompressor1;
    public static Solenoid grabberSolenoid1;
    public static AnalogInput autoSwitchAnalogInput1;
    public static SpeedController pIDPulleyPulleyMotor;
    public static Ultrasonic pIDPulleyPulleySonar;
    public static DigitalInput pIDPulleyLimitSwitch1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //For GearsBot Simulation                                              
    public static SpeedController pIDDriveTrainWheelLR;
    public static SpeedController pIDDriveTrainWheelRR;
    public static Gyro gyro;


    public static void init() {
    	if(RobotDefines.simulation==false) {
           // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
           pIDDriveTrainQuadratureEncoderRight = new Encoder(2, 3, false, EncodingType.k4X);
           LiveWindow.addSensor("PIDDriveTrain", "Quadrature EncoderRight", pIDDriveTrainQuadratureEncoderRight);
           pIDDriveTrainQuadratureEncoderRight.setDistancePerPulse(RobotDefines.cEncPulseDist);	//Manually modified
           pIDDriveTrainQuadratureEncoderRight.setPIDSourceParameter(PIDSourceParameter.kDistance);
           pIDDriveTrainQuadratureEncoderLeft = new Encoder(4, 5, false, EncodingType.k4X);
           LiveWindow.addSensor("PIDDriveTrain", "Quadrature EncoderLeft", pIDDriveTrainQuadratureEncoderLeft);
           pIDDriveTrainQuadratureEncoderLeft.setDistancePerPulse(RobotDefines.cEncPulseDist); //Manually modified
           pIDDriveTrainQuadratureEncoderLeft.setPIDSourceParameter(PIDSourceParameter.kDistance);
           pIDDriveTrainSonarL = new Ultrasonic(0, 1);
           LiveWindow.addSensor("PIDDriveTrain", "SonarL", pIDDriveTrainSonarL);
           
           pIDDriveTrainSonarR = new Ultrasonic(6, 7);
           LiveWindow.addSensor("PIDDriveTrain", "SonarR", pIDDriveTrainSonarR);
           
           pIDDriveTrainMotorL = new Talon(0);
           LiveWindow.addActuator("PIDDriveTrain", "MotorL", (Talon) pIDDriveTrainMotorL);
           
           pIDDriveTrainMotorR = new Talon(1);
           LiveWindow.addActuator("PIDDriveTrain", "MotorR", (Talon) pIDDriveTrainMotorR);
           
           pIDDriveTrainRobotDrive01 = new RobotDrive(pIDDriveTrainMotorL, pIDDriveTrainMotorR);
           
           pIDDriveTrainRobotDrive01.setSafetyEnabled(true);
           pIDDriveTrainRobotDrive01.setExpiration(0.1);
           pIDDriveTrainRobotDrive01.setSensitivity(0.5);
           pIDDriveTrainRobotDrive01.setMaxOutput(1.0);
           
           
           grabberCompressor1 = new Compressor(0);
           
           
           grabberSolenoid1 = new Solenoid(0, 0);
           LiveWindow.addActuator("Grabber", "Solenoid 1", grabberSolenoid1);
           
           autoSwitchAnalogInput1 = new AnalogInput(0);
           LiveWindow.addSensor("AutoSwitch", "Analog Input 1", autoSwitchAnalogInput1);
           
           pIDPulleyPulleyMotor = new Talon(4);
           LiveWindow.addActuator("PIDPulley", "PulleyMotor", (Talon) pIDPulleyPulleyMotor);
           
           pIDPulleyPulleySonar = new Ultrasonic(8, 9);
           LiveWindow.addSensor("PIDPulley", "PulleySonar", pIDPulleyPulleySonar);
           
           pIDPulleyLimitSwitch1 = new DigitalInput(10);
           LiveWindow.addSensor("PIDPulley", "Limit Switch 1", pIDPulleyLimitSwitch1);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    //Simulation enabled part
       } else {
           pIDDriveTrainQuadratureEncoderRight = new Encoder(3, 4, false, EncodingType.k4X);
           LiveWindow.addSensor("PIDDriveTrain", "Quadrature EncoderRight", pIDDriveTrainQuadratureEncoderRight);
           pIDDriveTrainQuadratureEncoderRight.setDistancePerPulse(RobotDefines.cEncPulseDistSim);
           pIDDriveTrainQuadratureEncoderRight.setPIDSourceParameter(PIDSourceParameter.kDistance);
           pIDDriveTrainQuadratureEncoderLeft = new Encoder(1, 2, false, EncodingType.k4X);
           LiveWindow.addSensor("PIDDriveTrain", "Quadrature EncoderLeft", pIDDriveTrainQuadratureEncoderLeft);
           pIDDriveTrainQuadratureEncoderLeft.setDistancePerPulse(RobotDefines.cEncPulseDistSim);
           pIDDriveTrainQuadratureEncoderLeft.setPIDSourceParameter(PIDSourceParameter.kDistance);
           
           pIDDriveTrainMotorL = new Talon(1);
           LiveWindow.addActuator("PIDDriveTrain", "MotorL", (Talon) pIDDriveTrainMotorL);
           
           pIDDriveTrainMotorR = new Talon(3);
           LiveWindow.addActuator("PIDDriveTrain", "MotorR", (Talon) pIDDriveTrainMotorR);
           
           pIDDriveTrainRobotDrive01 = new RobotDrive(pIDDriveTrainMotorL, pIDDriveTrainMotorR);

           pIDDriveTrainWheelLR = new Talon(2);
           LiveWindow.addActuator("PIDDriveTrain", "WheelLR", (Talon) pIDDriveTrainWheelLR);
           
           pIDDriveTrainWheelRR = new Talon(4);
           LiveWindow.addActuator("PIDDriveTrain", "WheelRR", (Talon) pIDDriveTrainWheelRR);
           
           pIDDriveTrainRobotDrive01.setSafetyEnabled(true);
           pIDDriveTrainRobotDrive01.setExpiration(0.1);
           pIDDriveTrainRobotDrive01.setSensitivity(0.5);
           pIDDriveTrainRobotDrive01.setMaxOutput(1.0);

           gyro = new Gyro(1);           
       	       
       }       
    }
}
