// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3793.PIDDrivetrain.subsystems;

import org.usfirst.frc3793.PIDDrivetrain.Robot;
import org.usfirst.frc3793.PIDDrivetrain.RobotMap;
import org.usfirst.frc3793.PIDDrivetrain.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 *
 */
public class DriveTrainPIDR extends PIDSubsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Encoder quadratureEncoderR = RobotMap.driveTrainPIDRQuadratureEncoderR;
    SpeedController wheelRF = RobotMap.driveTrainPIDRwheelRF;
    Encoder quadratureEncoderL = RobotMap.driveTrainPIDRQuadratureEncoderL;
    SpeedController wheelLF = RobotMap.driveTrainPIDRwheelLF;
    SpeedController wheelLR = RobotMap.driveTrainPIDRwheelLR;
    SpeedController wheelRR = RobotMap.driveTrainPIDRwheelRR;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Initialize your subsystem here
    public DriveTrainPIDR() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("DriveTrainPIDR", 4.0, 0.0, 0.0);
        setAbsoluteTolerance(5.0);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("DriveTrainPIDR", "PIDSubsystem Controller", getPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    protected double returnPIDInput() {
    	double aR,aL;
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
//        return quadratureEncoderR.pidGet();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    	aL = quadratureEncoderL.pidGet();
    	aR = quadratureEncoderR.pidGet();
    	System.out.println("Left is " + aL + "Right is " + aR);
        return (aL + aR)/2; 
    }
    
    public void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        wheelRF.pidWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    	wheelRF.pidWrite(-output);
        wheelRR.pidWrite(-output);
        wheelLF.pidWrite(output);
        wheelLR.pidWrite(output);
    }
    public void reset () {
    	getPIDController().reset();
    }

}
